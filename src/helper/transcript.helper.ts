import * as protobuf from "protobufjs";
import { Buffer } from "buffer";

function base64url(buf: Uint8Array): string {
  return Buffer.from(buf)
    .toString("base64")
    .replace(/\+/g, "-")
    .replace(/\//g, "_")
    .replace(/=+$/, "");
}

// Hoist protobuf Types to avoid re-allocation on every call
const Inner = new protobuf.Type("Inner")
  .add(new protobuf.Field("kind", 1, "string"))
  .add(new protobuf.Field("language_code", 2, "string"))
  .add(new protobuf.Field("empty", 3, "string"));

const Outer = new protobuf.Type("Outer")
  .add(new protobuf.Field("video_id", 1, "string"))
  .add(new protobuf.Field("inner_b64", 2, "string"))
  .add(new protobuf.Field("num3", 3, "int64"))
  // 4: target_language (optional)
  .add(new protobuf.Field("target_language", 4, "string", "optional"))
  .add(new protobuf.Field("panel", 5, "string"))
  .add(new protobuf.Field("num6", 6, "int64"))
  .add(new protobuf.Field("num7", 7, "int64"))
  .add(new protobuf.Field("num8", 8, "int64"));

interface InnerPayload {
  kind: string;
  language_code: string;
  empty: string;
}

interface OuterPayload {
  video_id: string;
  inner_b64: string;
  num3: number | string; // int64 acceptable as string in protobufjs
  target_language?: string;
  panel: string;
  num6: number | string;
  num7: number | string;
  num8: number | string;
}

export function generateTranscriptParams(
  videoId: string,
  languageCode: string,
  autoGenerated: boolean,
  translateTo?: string // optional target language code
): string {
  const kind = autoGenerated ? "asr" : "";

  // Inner message (the base64 one)
  const innerPayload: InnerPayload = {
    kind,
    language_code: languageCode,
    empty: "",
  };
  const innerBytes = Inner.encode(Inner.create(innerPayload)).finish();

  // Base64url encode inner
  const innerBase64 = base64url(innerBytes);

  // Outer message
  const outerPayload: OuterPayload = {
    video_id: videoId,
    inner_b64: innerBase64,
    num3: 1,
    panel: "engagement-panel-searchable-transcript-search-panel",
    num6: 1,
    num7: 1,
    num8: 1,
    ...(translateTo ? { target_language: translateTo } : {}),
  };

  const outerBytes = Outer.encode(Outer.create(outerPayload)).finish();

  return base64url(outerBytes);
}